generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "views"]
  binaryTargets   = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum actionCode {
  WAITING
  APPROVED
  REJECTED
}

enum sysAction {
  SUBMIT
  DRAFT
}

enum rowAction {
  CREATE
  UPDATE
  DELETE
}

enum bullRole {
  ro
  rw
}

model User {
  id               Int         @id @default(autoincrement())
  ldapId           Int?
  ldapDn           String?
  attempt          Int         @default(0)
  username         String      @unique
  fullname         String?
  jsonLdap         Json?
  email            String?
  createdAt        DateTime    @default(now())
  createdBy        Int?
  updatedAt        DateTime?   @updatedAt
  updatedBy        Int?
  recordStatus     String      @default("A")
  AccessCreate     Access[]    @relation("createdUser")
  AccessUpdate     Access[]    @relation("updatedUser")
  FormsCreate      Form[]      @relation("createdUser")
  FormsUpdate      Form[]      @relation("updatedUser")
  FormsGroupCreate FormGroup[] @relation("createdUser")
  FormsGroupUpdate FormGroup[] @relation("updatedUser")
  GroupsCreate     Group[]     @relation("createdUser")
  GroupsUpdate     Group[]     @relation("updatedUser")
  RolesCreate      Role[]      @relation("createdUser")
  RolesUpdate      Role[]      @relation("updatedUser")
  Roles            Role[]
  SessionsCreate   Session[]   @relation("createdUser")
  SessionsUpdate   Session[]   @relation("updatedUser")
  Sessions         Session[]
  TypesCreate      Type[]      @relation("createdUser")
  TypesUpdate      Type[]      @relation("updatedUser")
  createdUser      User?       @relation("createdUser", fields: [createdBy], references: [id])
  UserCreate       User[]      @relation("createdUser")
  ldap             Ldap?       @relation(fields: [ldapId], references: [id])
  updatedUser      User?       @relation("updatedUser", fields: [updatedBy], references: [id])
  UsersUpdate      User[]      @relation("updatedUser")
  WizardsCreate    Wizard[]    @relation("createdUser")
  WizardsUpdate    Wizard[]    @relation("updatedUser")
  UserGroup        UserGroup[]
}

model UserGroup {
  id           Int        @id @default(autoincrement())
  isDefault    Boolean    @default(false)
  userId       Int
  groupId      Int
  typeId       Int
  checkedBy    Int
  checkedAt    DateTime
  makedBy      Int
  makedAt      DateTime
  actionCode   actionCode
  rowAction    rowAction  @default(CREATE)
  sysAction    sysAction  @default(SUBMIT)
  changelog    String?
  recordStatus String     @default("A")
  user         User       @relation(fields: [userId], references: [id])
  group        Group      @relation(fields: [groupId], references: [id])
  type         Type       @relation(fields: [typeId], references: [id])

  @@index([userId], map: "userIdUG_Index")
  @@index([groupId], map: "groupIdUG_Index")
  @@index([typeId], map: "typeIdUG_Index")
}

model Wizard {
  id           Int       @id @default(autoincrement())
  token        String    @unique
  expiresIn    DateTime
  json         Json?
  hasExecuted  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  createdBy    Int
  updatedAt    DateTime? @updatedAt
  updatedBy    Int?
  recordStatus String    @default("A")
  createdUser  User      @relation("createdUser", fields: [createdBy], references: [id])
  updatedUser  User?     @relation("updatedUser", fields: [updatedBy], references: [id])
}

model Ldap {
  id           Int       @id @default(autoincrement())
  url          String
  filter       String
  attrEmail    String
  attrFullname String
  dc           String
  ouLogin      String
  ouSearch     String
  username     String
  password     String
  note         String?
  usePlain     Boolean   @default(true)
  isDefault    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  recordStatus String    @default("A")
  User         User[]
}

model Type {
  id           Int         @id @default(autoincrement())
  groupId      Int?
  name         String
  flag         String?
  mode         String?
  note         String?
  createdAt    DateTime    @default(now())
  createdBy    Int
  updatedAt    DateTime?   @updatedAt
  updatedBy    Int?
  recordStatus String      @default("A")
  Access       Access[]
  createdUser  User        @relation("createdUser", fields: [createdBy], references: [id])
  group        Group?      @relation(fields: [groupId], references: [id])
  updatedUser  User?       @relation("updatedUser", fields: [updatedBy], references: [id])
  UserGroup    UserGroup[]
}

model Group {
  id           Int         @id @default(autoincrement())
  name         String
  note         String?
  createdAt    DateTime    @default(now())
  createdBy    Int
  updatedAt    DateTime?   @updatedAt
  updatedBy    Int?
  recordStatus String      @default("A")
  FormsGroup   FormGroup[]
  createdUser  User        @relation("createdUser", fields: [createdBy], references: [id])
  updatedUser  User?       @relation("updatedUser", fields: [updatedBy], references: [id])
  Types        Type[]
  UserGroup    UserGroup[]
}

model Access {
  id           Int       @id @default(autoincrement())
  formId       Int
  typeId       Int
  roleAction   String
  roleValue    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  createdBy    Int
  updatedAt    DateTime? @updatedAt
  updatedBy    Int?
  recordStatus String    @default("A")
  createdUser  User      @relation("createdUser", fields: [createdBy], references: [id])
  form         Form      @relation(fields: [formId], references: [id])
  type         Type      @relation(fields: [typeId], references: [id])
  updatedUser  User?     @relation("updatedUser", fields: [updatedBy], references: [id])

  @@index([formId], map: "formIdIndex")
  @@index([typeId], map: "typeIdIndex")
}

model Role {
  id           Int       @id @default(autoincrement())
  formId       Int
  userId       Int
  roleAction   String
  roleValue    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  createdBy    Int
  updatedAt    DateTime? @updatedAt
  updatedBy    Int?
  recordStatus String    @default("A")
  createdUser  User      @relation("createdUser", fields: [createdBy], references: [id])
  form         Form      @relation(fields: [formId], references: [id])
  updatedUser  User?     @relation("updatedUser", fields: [updatedBy], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

model Form {
  id           Int         @id @default(autoincrement())
  name         String
  url          String?
  icon         String?     @default("mdi-snow")
  color        String?     @default("white")
  sort         Int         @default(0)
  parentId     Int?
  isReadOnly   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  createdBy    Int
  updatedAt    DateTime?   @updatedAt
  updatedBy    Int?
  recordStatus String      @default("A")
  Access       Access[]
  createdUser  User        @relation("createdUser", fields: [createdBy], references: [id])
  parent       Form?       @relation("children", fields: [parentId], references: [id])
  childs       Form[]      @relation("children")
  updatedUser  User?       @relation("updatedUser", fields: [updatedBy], references: [id])
  FormsGroup   FormGroup[]
  Roles        Role[]
}

model FormGroup {
  id           Int       @id @default(autoincrement())
  formId       Int
  groupId      Int
  note         String?
  createdAt    DateTime  @default(now())
  createdBy    Int
  updatedAt    DateTime? @updatedAt
  updatedBy    Int?
  recordStatus String    @default("A")
  createdUser  User      @relation("createdUser", fields: [createdBy], references: [id])
  form         Form      @relation(fields: [formId], references: [id])
  group        Group     @relation(fields: [groupId], references: [id])
  updatedUser  User?     @relation("updatedUser", fields: [updatedBy], references: [id])
}

model Session {
  id           Int       @id @default(autoincrement())
  token        String    @unique
  userId       Int
  type         String
  fcmUrl       String?
  createdAt    DateTime  @default(now())
  createdBy    Int
  updatedAt    DateTime? @updatedAt
  updatedBy    Int?
  recordStatus String    @default("A")
  createdUser  User      @relation("createdUser", fields: [createdBy], references: [id])
  updatedUser  User?     @relation("updatedUser", fields: [updatedBy], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "userIdIndex")
  @@index([recordStatus], map: "recordStatusIndex")
}

model Options {
  id           Int      @id @default(autoincrement())
  flag         String
  key          String
  value        String
  changelog    String
  createdAt    DateTime @default(now())
  recordStatus String   @default("A")
}

model RateLimit {
  id        Int      @id @default(autoincrement())
  projectId Int
  createdAt DateTime
  device    String?
  ipAddress String?
  apiKey    String?
}

model BullUser {
  id           Int      @id @default(autoincrement())
  username     String
  role         bullRole
  createdAt    DateTime  @default(now())
  recordStatus String
}
